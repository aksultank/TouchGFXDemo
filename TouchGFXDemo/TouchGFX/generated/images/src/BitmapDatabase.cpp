// 4.13.0 dither_algorithm=2 alpha_dither=yes layout_rotation=0 opaque_image_format=RGB565 non_opaque_image_format=ARGB8888 section=ExtFlashSection extra_section=ExtFlashSection generate_png=no 0x2a854681
// Generated by imageconverter. Please, do not edit!

#include <BitmapDatabase.hpp>
#include <touchgfx/Bitmap.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>

extern const unsigned char _arrow_down[]; // BITMAP_ARROW_DOWN_ID = 0, Size: 32x32 pixels
extern const unsigned char _arrow_down_gray[]; // BITMAP_ARROW_DOWN_GRAY_ID = 1, Size: 32x32 pixels
extern const unsigned char _arrow_left[]; // BITMAP_ARROW_LEFT_ID = 2, Size: 32x32 pixels
extern const unsigned char _arrow_left_gray[]; // BITMAP_ARROW_LEFT_GRAY_ID = 3, Size: 32x32 pixels
extern const unsigned char _arrow_right[]; // BITMAP_ARROW_RIGHT_ID = 4, Size: 32x32 pixels
extern const unsigned char _arrow_right_gray[]; // BITMAP_ARROW_RIGHT_GRAY_ID = 5, Size: 32x32 pixels
extern const unsigned char _arrow_up[]; // BITMAP_ARROW_UP_ID = 6, Size: 32x32 pixels
extern const unsigned char _arrow_up_gray[]; // BITMAP_ARROW_UP_GRAY_ID = 7, Size: 32x32 pixels
extern const unsigned char _blue_logo_touchgfx_logo[]; // BITMAP_BLUE_LOGO_TOUCHGFX_LOGO_ID = 8, Size: 128x128 pixels
extern const unsigned char _blue_progressindicators_bg_medium_progress_indicator_bg_square_0_degrees[]; // BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID = 9, Size: 184x20 pixels
extern const unsigned char _blue_progressindicators_fill_tiling_progress_indicator_fill_striped_normal_horizontal[]; // BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_PROGRESS_INDICATOR_FILL_STRIPED_NORMAL_HORIZONTAL_ID = 10, Size: 30x40 pixels

const touchgfx::Bitmap::BitmapData bitmap_database[] =
{
    { _arrow_down, 0, 32, 32, 13, 2, 6, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 27, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _arrow_down_gray, 0, 32, 32, 12, 2, 8, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 27, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _arrow_left, 0, 32, 32, 7, 3, 18, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 5, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _arrow_left_gray, 0, 32, 32, 23, 8, 8, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 16, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _arrow_right, 0, 32, 32, 24, 7, 5, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 18, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _arrow_right_gray, 0, 32, 32, 23, 8, 8, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 16, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _arrow_up, 0, 32, 32, 13, 3, 6, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 27, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _arrow_up_gray, 0, 32, 32, 12, 3, 8, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 27, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _blue_logo_touchgfx_logo, 0, 128, 128, 5, 5, 118, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 118, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 },
    { _blue_progressindicators_bg_medium_progress_indicator_bg_square_0_degrees, 0, 184, 20, 0, 0, 184, (uint8_t)(touchgfx::Bitmap::RGB565) >> 3, 20, (uint8_t)(touchgfx::Bitmap::RGB565) & 0x7 },
    { _blue_progressindicators_fill_tiling_progress_indicator_fill_striped_normal_horizontal, 0, 30, 40, 23, 19, 7, (uint8_t)(touchgfx::Bitmap::ARGB8888) >> 3, 21, (uint8_t)(touchgfx::Bitmap::ARGB8888) & 0x7 }
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
}
